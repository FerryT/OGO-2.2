BOARD ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

initialize
\begin{classcom}
Initialize is called from the outside world, when a new game has to be started. Note that the tiles and robots in this method are read from an input file. After the tiles and robots have been initiated, the Board pre-initializes the Controller and initializes all the robots. Finally, the Board post-initializes the Controller with the initialized Robots and the Board.
\end{classcom}

canReset
\begin{classcom}
CanReset is used by the Controller to let the Board know that the game has ended and that the Board can reset. The Board can reset whenever there is HomeTile on the Board that is occupied by the target robot. 
\end{classcom}

reset
\begin{classcom}
When the Board resets itself, the tiles, the controller and the robots are deleted.
\end{classcom}

requestSnapShot
\begin{classcom}
We make a snapshot by copying all the tiles and adding a mapping (same as for the original board). Next, with this snapshot the view can display the board.
\end{classcom}

cloneTile
\begin{classcom}
This help-method is used by the Board to create a snapshot of a single Tile. It takes the tile that will be cloned as input-parameter. Note that the output is not the Tile itself, but simply a copy of the tile with the same attributes as the input tile.
\end{classcom}

getHint
\begin{classcom}
GetHint is used by the Board to generate a hint. It takes the robot that requested a move as input-parameter. It checks where the HomeTile of the robot is and according to that gives the appropiate hint.
\end{classcom}

getHintLeft
\begin{classcom}
This method is a sub method of getHint, used to deal with HomeTile to the left of the robot.
\end{classcom}

getHintRight
\begin{classcom}
This method is a sub method of getHint, used to deal with HomeTile to the right of the robot.
\end{classcom}

getValidTiles
\begin{classcom}
getValidTiles corresponds to the private method in Board. The output is a pair of two valid tiles. A tile is valid for an exchange if it is not a HomeTile or a HintTile. Off course, the invariant also holds for this function.
\end{classcom}

requestTilesExchange
\begin{classcom}
Method to exchange the positions of two tiles on the board. These tiles should be valid. If a robot is on one of the tiles, it moves along.
\end{classcom}

specialExchange
\begin{classcom}
Method to deal with the fact that a robot is part of a tile exchange.
\end{classcom}

moveConveyorSwitch
\begin{classcom}
Make sure that a robot on a conveyor belt is moved to the proper tile.
\end{classcom}

moveConveyorSwitchSub
\begin{classcom}
Subfunction of moveConveyorSwitch, does the actual calculation of the placement of the robot.
\end{classcom}

moveRequest
\begin{classcom}
This functions deals with the moveRequest of the controller
\end{classcom}

moveRotate
\begin{classcom}
Used to deal with rotations a robot wants to make.
\end{classcom}

moveWalk
\begin{classcom}
Used to deal with other movements a robot wants to make.
\end{classcom}

checkTile
\begin{classcom}
Subfunction of moveWalk, used to check on which tile the robot will end and gives the proper response.
\end{classcom}

saveLocation
\begin{classcom}
saveLocation corresponds to the private method in Board. It has two input-variables: absCoords, which is an absolute coordinate and robot, which is the robot that has been moved.  If we want to save the new location of the robot, the Tile that becomes the new location must be empty. The help-method put is used to place the robot on the empty Tile. After the location has been saved, the viewer is notified of the robot's location change, so it can redraw the Board.
\end{classcom}

clearTile
\begin{classcom}
clearTile is a help-method that clears the occupies variable of a Tile.
\end{classcom}

put
\begin{classcom}
put is a help-method that takes a robot as input-variable and sets the occupies-variable of a Tile to this robot.
\end{classcom}

calculateNewLocation
\begin{classcom}
Function to calculate the location of a robot according to it's path.
\end{classcom}

checkPath
\begin{classcom}
Function to check if the path is free (if not, a ConveyorTile should be in front of the obstacle in order to let the path be valid). Calculate new coordinates as well
\end{classcom}

firstConveyor
\begin{classcom}
Calculate the first occuring ConveyorTile for a given path
\end{classcom}

addAbtoRel
\begin{classcom}
Calculate the absolute coordinate from an absolute coordinate and a relative coordinate, taking the height / width of the bord into account.
\end{classcom}

CONTROLLER ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
addViewer
\begin{classcom}
addViewer corresponds to the public method in Controller. It takes a viewer as an input variable; this is the Viewer that wants to attach itself to the controller. If the Controller did not have a Viewer attached to it yet, then the Controller saves the Viewer and returns itself to the Viewer. The Viewer will then be able to address the controller, for board snapshot requests. If the Controller already had a Viewer attached to it, then the add-request is simply ignored.
\end{classcom}

notifyAutoMovement
\begin{classcom}
notifyAutoMovement corresponds to the public method in Controller. It takes the Robot that requested a move as input-parameter. This method is used by the Board to let the Robot know that it has been moved by a conveyor tile. 
\end{classcom}

moveRequest
\begin{classcom}
moveRequest corresponds to the public method in Controller. It takes local coordinates, the Robot that requested the move and a rotation as input-parameters. The Controller forwards the move request of the robot, along with the specified attributes to the Board. If the Board then responds with "WIN", then the Controller must terminate all robots, notify the Viewer that the game has ended and terminate.
\end{classcom}

notifyHint
\begin{classcom}
Notify the controller of an appropriate hint.
\end{classcom}

notifyView
\begin{classcom}
Notify the viewer that the board has changed.
\end{classcom}

preInitialize
\begin{classcom}
Initialize the controller so that it can be referred to.
\end{classcom}

postInitialize
\begin{classcom}
The real initialization of the controller, giving it a board and robots.
\end{classcom}

removeViewer
\begin{classcom}
Remove a viewer (so that eventually, a new one can be added).
\end{classcom}

requestBoardStatus
\begin{classcom}
Function to get a snapshot of the board.
\end{classcom}