Use cases:
- Soms volzinnen, soms niet. Probeer overal volzinnen te gebruiken.
- Use cases in dezelfde volgorde plaatsen als de MSCs.
- Let op dat je niet teveel herhaling gebruikt in je zinnen. Niet iedere keer "this use case ..."
- Misschien hier iets uitleggen over de naam-conventie van de use cases i.p.v. in het MSC-stuk?
- Tiles exchange
	- mist een stap: eerst doet Controller een requestTilesExchange
	- in stap b hoef je niet te vermelden dat het een ordinary exchange is. De tiles worden ge-exchanged ongeacht of het een ordinary of special is.
	- eerst retourneert het bord een empty robot pair naar de controller, daarna wordt een snapshot gemaakt + genotified
	- Hoezo al die alternatives? In de MSC is het toch zo rechtlijnig?
- Robot move request
	- Guarantee is NIET dat de robot gemoved is! De pre-conditie is ook niet een lege tile. De guarantee is dat het board de move gaat checken op basis van de rotaties en moves van de robot's rule.
- Robot move normal
	- zijn de MSCs zo goed?
- Robot move hint
	- Guarantee is dat de hint naar de ROBOT is gestuurd
	- Co-regions? 
- Robot move conveyor
	- Rekent het board echt expliciet opnieuw de positie uit? Moet dat dan ook in de MSC?
	- Co-regions?
- Reject move
	- Trigger = move request + board heeft bepaald dat het niet mag
- Notify robot
	- Eerst recursief bepalen of er robots zijn die nog moeten verplaatsen.
- Initialize Viewer
	- Trigger is net zoals in initialize; start game?
	- Extra stap: viewer blijft proberen zich aan te melden in de initialize, totdat deze een response krijgt van de controller