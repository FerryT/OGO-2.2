MSCs suggesties:
- Uitleg over de verschillende soorten pijlen? Waarom gebruiken we soms signals en soms method calls?
- Viewer_initialize
  ~ Inconsistentie met classe diagram: initialize uit Viewer heeft ook de Controller nodig!!
- Robotmove_to_conveyer
  ~ Net als in Robotmove_to_hint: kan er hier een coregion gebruikt worden bij de laatste twee notify's?

-----------------------------------------------------------------------------------------------------------------------

SC suggesties (IK HEB DE SVG's BEOORDEELD, DACHT DAT DIE DE LAATSTE VERSIE WAREN)
- Board.svg
  ~ Punt tussen ControllernotifyAutoMovement(); [Robot(s) on moved tiles]?
  ~ Notitie maken?: Waarom twee transities beide met label canReset / reset()?
  ~ Uitleg over 'RequestedRobotMovedAndRobotAutoMoved': heeft te maken met robots die naar aanleiding van een 			moverequest verplaatst is. Gebruik hetzelfde principe als in de System.svg: het Board kan zelf concluderen dat 	er een of meer robots geautomoved moet worden. Dat kan dus ook binnen de Board.svg worden weergegeven.
  ~ Waar staat de BoardResponse met WIN in dit diagram? Dat kan toch lokaal geconcludeerd worden? En het is wel degelijk 	een belangrijke toestand!
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Controller.svg
  ~ Eigenlijk niet eerst een state 'uninitialized/undefined' en van daaruit de preInitialize() naar 'Initialize'-state?
  ~ De controller vraagt niet om de BoardStatus en de BoardSnapshot. De Viewer deed dat...
  ~ moveRequest() [Robot can be placed]-conditie moet weg, toch? De Controller kan dat helemaal niet concluderen. Gewoon 	moveRequest() / Board.moveRequest().
  ~ Persoonlijk zou ik 'RobotMoveProcessed' in 'RobotMoveInProcess' veranderen. 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Robot.svg
  ~ SC is nu vrij breed; kan smaller, ziet er wat netter uit.
  ~ Ook hier zou ik een 'undefined/unitialized' state maken.
  ~ Waar initialiseren wij een Robot op? Altijd op een NormalTile? 
  ~ Een Robot weet toch sowieso niet op wat voor Tile hij staat? Hij heeft een state 'NOP', hij request een 				move en wordt genotificeerd over alles naar aanleiding van de Tile waarop hij terecht komt. Binnen de classe 	
	Robot is deze kennis over verschillende Tiles helemaal niet bekend, afgezien van de HomeTile.
  ~ Waarom termineert een Robot als ie op een HintTile/ConveyerTile is?
  ~ Waar zijn de notifyAutoMovements?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Viewer.svg
  ~ Ook hier kan de SC veel smaller; ziet er netter uit.
  ~ De pijl naar terminate() mss wat langer; geeft duidelijker weer dat de tekst bij die transitie hoort.
  ~ De Viewer wordt ook geïnitialiseerd! Hetzij concurrent, maar deze SC moet dus ook voorzien worden van een 	'undefined/unitialized' state met van daaruit een initialize() naar NOP.
  ~ Twee terminate-condities: de Viewer kan zelf besluiten te termineren, of naar aanleiding van een notifyGameOver().
  ~ Na initialisatie kan de Viewer zich aanmelden bij de Controller via addViewer(). Bij termineren moet deze de 		Controller dit laten weten met removeViewer().
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- System.svg
  ~ Alle bovenstaande opmerkingen zijn natuurlijk ook van toepassing op de system-level svg.
  ~ Nu kan de Robot classe wel met Tiles werken; dit is vanuit Systeem-opzicht te overzien, maar wel een notitie maken 		dat binnen de Robot classe, de Robot zelf geen onderscheid maakt tussen Tiles.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
LET OP: Staan de nieuwste versies van de SCs nou al in het verslag of niet?

-----------------------------------------------------------------------------------------------------------------------

CD suggesties:
- canPlaceRobot() weg! Impliciet in calculateNewLocation.
- Waarom zijn x en y in Coords public? Standaard zijn variabelen private!
- Moet de specialization pijl niet vanuit de box om BrokenRobotTile t/m HintTile lopen? Nu lijkt het alsof alleen 	NormalTile een specializatie is...
- Kun je multipliciteiten toevoegen?
- saveLocation() in Board?
- terminate() in Controller?
- We geven telkens localcoords (relative coordinates) mee aan de Controller bij een moveRequest: moet de uses-pijl van 	Robot naar RelativeCoordinate dan geen directed association worden?