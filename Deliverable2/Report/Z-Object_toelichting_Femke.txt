TOELICHTING:
Ik heb mijn opmerkingen opgedeeld op dezelfde manier als in het Object-Z document. Het onderscheid tussen de verschillende klassen wordt gemaakt met -NaamClasse-; alles wat daarna komt is van toepassing op die klasse. Boven elk stukje commentaar heb ik tussen <>-haken gezet op welk attribuut of op welke functie/methode het commentaar van toepassing is. 
Als ik '+ inleiding' heb gezet, moet het commentaar bij de inleiding van die class, dus niet in classe zelf.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ inleiding:
Note that in the Z-specification, abbreviations are only used for dummy-variables; variables that refer to existing attributes or parameters in the class diagram are not abbreviated.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1.0.1 Basic Axiomatic Definitions

<Rotation>
Rotation is used for the orientation of robots and conveyor belts.

<BoardResponse>
BoardResponse is a response to move requests or (implied) movement notifications. In an (implied) movement notification, WIN indicates that the recipient has won the game.

<Hint>
Hint is a response that a robot receives, when he visits a hint tile.

<Null>
Null is an axiomatic null object that is used when an empty return-value is preferred.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1.0.2 classes

-Coord-
For sake of breviaty, the Coord class is introduced in the Z-specification, so it can be used in both AbsoluteCoord and RelativeCoord; an absolute coordinate can now be expressed by restricting the values of x and y to values in the interval [0, BoardWidth). Note that this class is not shown in the class diagram, since that would not add any functionality to the class diagram. 
The Coord class contains the width and height-variables from the Board; these variables are in fact the attributes of Board in the class diagram. In order to keep the Z-specification readable and easier to model, these attributes were placed in the Coord class.

-Tile-

The private isSnapShotTile-member indicates that the tile is in fact a copy from a board; if the value is true, it is thus part of a BoardSnapshot-object. 

<Init>
Initially, no robots have been placed yet, so the occupied-variable has value Null.

<clear>
clear is a helper-method that clears the occupies-variable of a Tile. Hence, the occupier-variable is set to Null.

<put>
put is a helper-method that takes a robot as input-variable and sets the occupies-variable of a Tile to this robot. 

<rotate>
Rotate is an abstract method that is overridden by Conveyor Tile, since a conveyor tile is the only tile that can change its rotation.

-NormalTile-
A NormalTile is a tile with no special meaning.

-HintTile-
A HintTile is a tile that returns a hint as to where the robot's home tile is, whenever a robot visits the tile.

-BrokenRobotTile-
A BrokenRobotTile is a tile that contain (static) broken robots that probihit other robots from visiting this tile; hence, the occupied-variable of this tile is always Null.

-HomeTile-
A HomeTile is a tile that a (specific) robot has to visit, in order to win the game. 

-ConveyorTile-
A ConveyorTile is a tile that automatically transports a robot to another tile, when a robot visits this tile.

<rotate>
rotate is a helper-method that rotates this ConveyorTile to an arbitrary direction; the predicate is thus empty, since a random rotation is selected.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-Board-
<canReset>
canReset is a public attribute that determines whether the board can terminate.

<initialize>


<tiles>
tiles maps every possible coordinate to a (polymorphic) tile.

<robots>
robots maps a set of robots to a rotation. The domain of this function is used to store the robots that are currently playing.

<controller>
controller links the board to the controller, so the board can send messages to the controller.

<occupied>
occupied is a set of coordinates that are currently occupied.

<adjacent>
adjacent is a relation that indicates which adjacent tiles are reachable.

<conveyorUnitDest>
conveyorUnitDest is a helper-function that returns the destination of a single conveyor tile.

<conveyorDest>
conveyorDest is a helper-function that returns the end destination of a path of conveyor tiles.

<Invariant met occupied>
The occupied-set is used to express the following invariant: "each element ($c$) in occupied is either a BrokenRobotTile or a tile that is currently occupied by a (playing) robot". The occupied-set contains namely all coordinates of those tiles that are currently occupied, which also includes the broken robots. 

<Invariant met conveyorUnitDest>
The following invariant describes the direction in which a robot is to be transported, whenever it steps on a single conveyor tile. The dummy-variable $c_1$ is the conveyor tile that a robot moved to and $c_2$ is the destination tile that is reached from the conveyor tile $c_1$. Hence, conveyerUnitDest describes all tiles $c_2$ that are reached from $c_1$. This means that $c_2$ must not be occupied in the first place; otherwise it is not reachable. If the rotation is 0 degrees, the robot is transported one step into the positive x-direction. If the rotation is 90 degrees, the robot is transported one step into the negative y-direction. If the rotation is 180 degrees, the robot is transported one step into the negative x-direction. If the rotation is 270 degrees, the robot is transported one step into the positive y-direction. Note that a conveyor tile will always transport a robot either in the x- or in the y-direction, but never simultaneously.

<Invariant met conveyorDest>
The conveyorDest-function is used in the following invariant to express the outcome of a path of conveyor tiles. The dummy-variable $c_1$ is again the original conveyor tile and $c_2$ is the destination tile. Now, the end-destination is returned, so the destination tile $c_2$ can either be a conveyor-tile or a non-conveyor-tile. In the latter case, the end of the conveyor belt is blocked, so the robot has to be transported to the far-most conveyor-tile. Note that this last case implies that the reflexive-transitive closure is calculated, because a robot can immediately be blocked if it steps onto the conveyor tile $c_1$; this means that $c_1$ and $c_2$ are the same.
 
<Invariant met !t.isSnapshotTile>
The following invariant states that all tiles, referred to as the dummy-variable $t$, of the board are not snapshot tiles. A snapshot tile is simply a copy of the original tile, which cannot be mutated. The board must however be able to change all the tiles it has; hence, all tiles in the range of the tiles-mapping cannot be snapshot tiles.

<Invariant met adjacent>
The following invariant describes when all tiles that are reachable. Here, the dummy-variable $c$ describes the absolute coordinate of the tile $d$. Two tiles are adjacent if their coordinates differ at most 1 unit and if the tile $d$ is not occupied, either by a broken robot or by a playing robot.

<Init>
Initially, the board has no tiles, robots and also no controller. The reset-function can thus be called here.

<makeSnapshot>
makeSnapshot is a helper-method that is used by the board to create a snapshot for the viewer. The output-variable is thus of type snapshot. The dummy-variables $c_1$ and $t_1$ describe an absolute coordinate on the board and the associated tile, respectively; the dummy-variables $c_2$ and $t_2$ describe the snapshot-coordinate of $c_1$ and the snapshot-tile of $t_1$. A snapshot simply makes a copy of each tile, hence the tile-coordinates of $c_1$ and $c_2$ are the same. Since $t_2$ contains the copy of the tile $t_1$, it has the same properties as $t_1$. For example, if $t_1$ is a normal tile, then the corresponding snapshot-tile $t_2$ is also a normal tile. Note that the occupier of a tile and its rotation, in case of a conveyor tile, are also recorded in the snapshot-tiles. 

<hintMapping>
hintMapping maps a tecti-linear unitvector that describes a direction to a hint. A tecti-linear vector in a non-Euclidean space. Hence, a pair (1, 1) does not reflect an (x, y)-coordinate pair; it is used here to map the different cardinal directions of a compass to a single pair (i, j), where i and j are both numbers in the range {-1, 0, 1}. Below, the hintMappings along with the corresponding cardinal directions (hints) are given. This function is used by getHint to obtain a hint in the appropriate direction.

<rotate90Deg>
rotate90Deg maps a hint, which is a cardinal direction, to the cardinal direction that is obtained by a counter-clockwise rotation over 90 degrees. For example, by rotating the cardinal direction North counter-clockwise over 90 degrees, the cardinal direction West is obtained. The other rotate90Deg-mappings are given below. This helper-function is used by getHint to map the given hint to the current rotation of the robot.

<getHint>
getHint takes a robot as input-parameter and uses hint as an output-parameter to provide the hint to the robot; it corresponds to the getHint-method of the Board class. The $\delta x$ and $\delta y$ contain the horizontal and vertical direction of the robot's home tile, respectively. These are expressed in a similar way to the hint-directions in hintMapping.numRotations is used to determine the robots current rotation, with respect to the initial 0 degrees orientation. \\
The value of numRotations is obtained by dividing the current rotation of the robot by 90 degrees. Now, the dummy-variables $c_1$, $c_2$ and $h$ are used to calculate the direction of the hint. Here, $c_1$ is the home tile of the robot, $c_2$ is the tile on which the robot is currently standing. The $\delta x$ and $\delta y$-variables are now calculated, using the difference in x- and y-coordinates. These differences are mapped to numbers in the range {-1, 0, 1}, by dividing the difference by the lenght of the difference. The appropriate hint for the direction of the home tile is obtained by a call to hintMapping. Now, the hint has to be mapped to the current rotation of the robot; this is accomplished by a call to rotate90Deg 'numRotations' times.

<getValidTiles>
getValidTiles corresponds to the private method in Board. The output is a pair of two valid tiles. A tile is valid for an exchange if it is not a HomeTile or a HintTile. The dummy-variable $b$ represents the board and $(c_1, t_1)$ and $(c_2, t_2)$ represent the coordinates and the tiles of the two tiles that are going to be exchanged. Exchanging two tiles means that the coordinates of the tiles are switched; hence tile $t_1$ obtains the coordinates $c_2$ of tile $t_2$ and vice versa. Note that the properties of the tiles and the robots of the board remain the same. 

-Robot-
<rule & controller & hints>
A robot has a rule and a referrence to the controller. It may also maintain a list of hints it has received so far; this is not shown in the class diagram, but it is specified in Z, in order to show a possible tactic of a robot. 

<initialize>
The initialize-method corresponds to the initialize of the Robot class. The input-variables are the controller and the rule that the robot obtains from the board. After the initialize, these variables have been saved in the private attributes of the robot.

<notifyAutoMovement>
notifyAutoMovement is used by the controller to notify that the robot was moved by a conveyor belt; it corresponds to the notifyAutoMovement in the Robot class. Since a robot can be rotated by a conveyor belt, the list of hints is cleared; the robot has now no idea where its home tile is.

<notifyHint>
notifyHint is used by the controller to provide the hint that was generated by the board. The received hint is added to the current hint-list. 

<play>
Although play is not modeled in the class diagram, it is modeled in Z in order to show how a robot behaves. A robot can only request a move in terms of its local coordinates ($coords$), since it is not aware of its absolute position on the board. The robot also provides is current rotation ($r$) in a move request. A robot requests only moves that are specified by its rule, which are stored in possibleMoves. Similarly, a robot requests only rotations that are stored in possibleRotations. The robot then does a move request, by making a call to the moveRequest of the controller; it sends the requested destination $coord$, the requested rotation $r$ and a reference to itself.

-Viewer-
+ inleiding:
The viewer has no knowledge of the board; every change of the board must be communicated to the viewer via the controller.

---
<currentSnapshot>
currentSnapshot contains the current snapshot of the board.

<initialize>
initialize corresponds to the initialize-method in the Viewer class. A viewer is initialized with the controller, so the controller in the input-variable is saved in the private attribute of the viewer.

<notifyStateChange>
The board will notify the viewer when the board has changed via notifyStateChange; this method corresponds to the public method of the Viewer class. After the board has been initialized, it will also send an initial snapshot to the viewer via this method. The viewer saves the snapshot it receives via this method in the private attribute currentSnapshot.

<updateView>
updateView corresponds to the updateView-method in the Viewer class. The viewer updates its view whenever it receives a notifyStateChange from the controller; the boardsnapshot that is send with the notifyStateChange is used to update the current snapshot in the viewer. The viewer then updates the screen, via updateScreen.

-Controller-
+ inleiding: 
The controller has knowledge about the board and the viewer and it also maintains a list of the robots that are currently playing. The controller is the hub between the robots to the viewer and the board. It will pass the requests and notifications to and fro.

---
<addViewer>
addViewer corresponds to the public method in the Controller class. It takes a viewer as input-variable; this is the viewer that wants to attach itself to the controller. Note that if the controller already had a viewer attached to it, then it will ignore the addViewer-request; otherwise, the current viewer could be busy displaying the current image and the image will be corrupted.

<preInitialize>
preInitialize corresponds to the public method in the Controller class. Pre-initialization involves clearing the viewer, the board and the list of robots.

<postInitialize>
postInitialize involves the actual initialization of the controller; it corresponds to the postInitialize-method in the Controller class. The input-parameters are the initialized board and a list of the initialized robots. After the postInitialize, the values of these parameters is saved in the appropriate private attributes.

<notifyAutoMovement>
notifyAutoMovement corresponds to the public method in the Controller class. It takes the robot that requested a move as input-parameter. The controller forwards the automovement from the board to the specified robot.

<moveRequest>
The moveRequest-method corresponds to the public moveRequest in the Controller class. It takes the requested local coordinates, the robot that requested a move and the requested rotation as input-parameters. The controller forwards the move request of the robot, along with the specified attributes to the board. If the board responds with "WIN", then the controller must terminate all robots, notify the viewer that the game has ended, tell the board that it can reset and terminate itself. 

<notifyHint>
notifyHint corresponds to the public method in the Controller class. It is used by the board to forward a hint to the appropriate robot. 

<notifyViewer>
notifyViewer is used by the board to notify the viewer of a state change; it corresponds to the public notifyViewer-method. The controller forwards the board snapshot via notifyStateChange in Viewer.

<removeViewer>
removeViewer corresponds to the public method in the Controller class. Removing a viewer boils down to clearing the current viewer-attribute.